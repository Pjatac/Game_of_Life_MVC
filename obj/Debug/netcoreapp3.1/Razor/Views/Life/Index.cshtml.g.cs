#pragma checksum "C:\Users\pjata\source\repos\Game_of_Life_MVC\Views\Life\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e7672ea36bd2aad7cf3a04f51f1cd1e5bbd19ec1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Life_Index), @"mvc.1.0.view", @"/Views/Life/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\pjata\source\repos\Game_of_Life_MVC\Views\_ViewImports.cshtml"
using Game_of_Life_MVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\pjata\source\repos\Game_of_Life_MVC\Views\_ViewImports.cshtml"
using Game_of_Life_MVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e7672ea36bd2aad7cf3a04f51f1cd1e5bbd19ec1", @"/Views/Life/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b3d2763db7a4234eba7b62b44b16209398b390d", @"/Views/_ViewImports.cshtml")]
    public class Views_Life_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\pjata\source\repos\Game_of_Life_MVC\Views\Life\Index.cshtml"
  
	ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"text-center\">\r\n\t<canvas id=\"canvas\" width=\"320\" height=\"320\"></canvas>\r\n</div>\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
	<script type=""text/javascript"">
		function draw() {
			let neighbor = [];
			let life = [];
			let move = [];
			let styles = ['black', 'white'];

			function randomFull(life, row, col) {
				life[0] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
				life[29] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
				for (i = 0; i < row - 1; i++) {
					life[i] = [];
					for (j = 1; j < col - 1; j++)
						life[i][j] = Math.floor(Math.random() * 2);
					life[i][0] = 0;
					life[i][29] = 0;
				}
			}

			randomFull(move, 30, 30);
			randomFull(life, 30, 30);

			var canvas = document.getElementById('canvas');
			var ctx = canvas.getContext('2d');

			for (let i = 0; i < 30; i++)
				for (let j = 0; j < 30; j++) {
					ctx.fillStyle = styles[life[i][j]];
					ctx.fillRect(i * 10, j * 10, 10, 10);
				}
			setInterval(() => {
				endOfmoves = 0;
				for (let i = 0; i < 30; i++)
					for (");
                WriteLiteral(@"let j = 0; j < 30; j++)

						if (i > 1 && j > 1 && i < 29 & j < 29) {
							neighbor[0] = life[i - 1][j - 1];
							neighbor[1] = life[i - 1][j];
							neighbor[2] = life[i - 1][j + 1];
							neighbor[3] = life[i][j - 1];
							neighbor[4] = life[i][j + 1];
							neighbor[5] = life[i + 1][j - 1];
							neighbor[6] = life[i + 1][j];
							neighbor[7] = life[i + 1][j + 1];
							let sum = 0;
							for (let k = 0; k < 8; k++) {
								sum += neighbor[k];
							}
							if (life[i][j] == 0 && sum == 3) {
								move[i][j] = 1;
								endOfmoves = 1;
							}
							if (life[i][j] == 1 && sum < 2) {
								move[i][j] = 0;
								endOfmoves = 1;
							}
							else if (life[i][j] == 1 && sum > 3) {
								move[i][j] = 0;
								endOfmoves = 1;
							}
						}
				for (let i = 0; i < 30; i++)
					for (let j = 0; j < 30; j++)
						life[i, j] = move[i, j];

				for (let i = 0; i < 30; i++)
					for (let j = 0; j < 30; j++) {
						ctx.fillStyle = styles[life[i]");
                WriteLiteral(@"[j]];
						ctx.fillRect(i * 10, j * 10, 10, 10);
					}
				// Restart if moves end
				if (endOfmoves == 0) {
					life = RandomFull(30, 30);
					for (let i = 0; i < 30; i++)
						for (let j = 0; j < 30; j++) {
							ctx.fillStyle = styles[0];
							ctx.fillRect(i * 10, j * 10, 10, 10);
						}
				}
			}, 1000);
		}
	</script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
